{% extends 'GameBundle::layout.html.twig' %}

{% block title %}Adon Melech - Map view{% endblock %}

{% block content %}

    <div class="container-fluid">
        <!--- MAP CONTAINER --->

            <div class="row-fluid">
                <div class="col-md-12" oncontextmenu="return false;">
                    <canvas height="600px" width="1200px" id="map" style="margin-left:-70px; margin-top:5px; position: absolute; left: 0; top: 0; z-index: 0;"></canvas>
                    <canvas height="600px" width="1200px" id="stuff" style="margin-left:-70px; margin-top:5px; position: absolute; left: 0; top: 0; z-index: 0;"></canvas>
                </div>
            </div>

        <!--- BOTTOM BAR --->

            <div class="row-fluid navbar-fixed-bottom" id="info-panes" style="margin-bottom:-8px;">
                <div class="col-md-3 bottom">
                    <div class="panel pane-default">
                        <h4>[ContextName]</h4>
                        <p>[ContextProperties]</p>
                        <ul>
                            <li>[Key] => [Value]</li>
                        </ul>
                    </div>
                </div>

                <div class="col-md-6">
                        <div class="panel panel-default">
                            <div class="row">
                                <div class="col-md-6">
                                <h4 id="txt-inspector-name"></h4>
                                <small>[ContextProperties]</p>
                                    <ul id="txt-inspector-properties">
                                        <li></li>
                                    </ul></small>
                                </div>
                                <div class="col-md-6">
                                    <form name="inspector_controls" action="/control" method="post" id="form-controls">
                                        <p>
                                            <input type="button" name="sample2" class="button btn-default" value="Trade">
                                            <input type="button" name="sample2" class="button btn-default" value="Diplomacy">
                                        </p>
                                        <p>
                                            <input type="button" name="sample1" class="button btn-default" value="Counsel">
                                        </p>
                                        <p id="p-listbox">
                                        </p>
                                    </form>
                                </div>
                            </div>
                        </div>
                </div>

                <div class="col-md-3 pull-right">
                    <div class="panel panel-default">
                        <h4>News</h4>
                        <small>
                        <ul style="list-style-type: hebrew;" id="ul-newsbox">
                        </ul></small>
                    </div>
                </div>
            </div>
    </div>

{% endblock %}

{% block javascripts %}
<script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<script src="{{ asset('js/bootstrap.js') }}" type="text/javascript"></script>
<script>


$(document).ready(function() {

        // Load the images
        var plains = new Image();
        plains.src = "http://s3.amazonaws.com/adonmelechrs/tiles/plains_tile.png";
        var hills = new Image();
        hills.src = "http://s3.amazonaws.com/adonmelechrs/tiles/hills_tile.png";
        var desert = new Image();
        desert.src = "http://s3.amazonaws.com/adonmelechrs/tiles/desert_tile.png";
        var mountains = new Image();
        mountains.src = "http://s3.amazonaws.com/adonmelechrs/tiles/mountains_tile.png";
        var swamp = new Image();
        swamp.src = "http://s3.amazonaws.com/adonmelechrs/tiles/swamp_tile.png";
        var forest = new Image();
        forest.src = "http://s3.amazonaws.com/adonmelechrs/tiles/forest_tile.png";
        var shallowsea = new Image();
        shallowsea.src = "http://s3.amazonaws.com/adonmelechrs/tiles/shallowsea_tile.png";
        var deepsea = new Image();
        deepsea.src = "http://s3.amazonaws.com/adonmelechrs/tiles/deepsea_tile.png";
        var city = new Image();
        city.src = "http://s3.amazonaws.com/adonmelechrs/tiles/city.png";
        var clan = new Image();
        clan.src = "http://s3.amazonaws.com/adonmelechrs/tiles/clan.png";

    // Make the ajax call
    $.ajax({
        url: "/map",
        type: "GET",
        dataType: "json",
        success: function (data) {
            console.log(data);
            // Instantiate the gameboard area
            // Draw a field of mapzones defined by geotype on the bottom layer
            var c = document.getElementById("map");
            var ctx = c.getContext("2d");
            ctx.beginPath();

            for (var i = 0; i < data['mapzones'].length; i++) {
                var x2 = data['mapzones'][i].x * plains.width;
                var y2 = data['mapzones'][i].y * plains.height;
                var gt = data['mapzones'][i].geotype;

                switch (gt) {
                    case 'plains':
                        ctx.drawImage(plains, x2, y2);
                        break;
                    case 'hills':
                        ctx.drawImage(hills, x2, y2);
                        break;
                    case 'mountains':
                        ctx.drawImage(mountains, x2, y2);
                        break;
                    case 'desert':
                        ctx.drawImage(desert, x2, y2);
                        break;
                    case 'swamp':
                        ctx.drawImage(swamp, x2, y2);
                        break;
                    case 'forest':
                        ctx.drawImage(forest, x2, y2);
                        break;
                    case 'deepsea':
                        ctx.drawImage(deepsea, x2, y2);
                        break;
                    case 'shallowsea':
                        ctx.drawImage(shallowsea, x2, y2);
                        break;
                }
                ctx.fillText('id=' + data['mapzones'][i].id, x2 + 15, y2 + 15);
            }

            // If there are some cities, draw those on the bottom layer
            if (data['cities']) {
                for (var n = 0; n < (data['cities'].length); n++) {
                    ctx.drawImage(city, (data['cities'][n].x * plains.width) + 28, (data['cities'][n].y * plains.height) + 10);
                    ctx.fillText(data['cities'][n].named, (data['cities'][n].x * plains.width) + 33, (data['cities'][n].y * plains.height) + 20);
                }
            }

            // Store whatever data we got in session so that it can be accessed later
            sessionStorage.setItem("data", JSON.stringify(data));

            // If there are some clans, draw them on the top layer and refresh every 5000ms
            (function worker() {
                $.ajax({
                    url: "/entities",
                    type: "GET",
                    dataType: "json",
                    success: function(data) {
                        if (data['clans']) {
                            var c = document.getElementById("stuff");
                            var ctx = c.getContext("2d");
                            ctx.clearRect(0, 0, c.width, c.height);
                            ctx.beginPath();

                            for (var n = 0; n < (data['clans'].length); n++) {
                                var fx = Math.floor((Math.random() * 60) + -10);
                                var fy = Math.floor((Math.random() * 20) + 50);
                                ctx.drawImage(clan, (data['clans'][n].x * plains.width) + fx, (data['clans'][n].y * plains.height + fy));
                                ctx.fillText(data['clans'][n].named, (data['clans'][n].x * plains.width) + fx + 8, (data['clans'][n].y * plains.height) + fy + 10);
                            }
                        }

                        // Populate a listbox with the current clans, if any exist here
                        // If none do, erase the listbox
                        var p = document.getElementById('p-listbox');
                        if (data['clans'].length > 0) {
                            while (p.firstChild) p.removeChild(p.firstChild);
                            var lststr = "Nearby tribes ";
                            lststr += '<select name="clans-list" style="width:150px; color:black;">';
                            for (i = 0; i < data['clans'].length; i++) {
                                lststr += '<option value="' + data['clans'][i].named + '">' + data['clans'][i].named + '</option>';
                            }
                            lststr += '</select>';
                            p.innerHTML = lststr;
                        } else {
                            while (p.firstChild) p.removeChild(p.firstChild);
                        }

                        sessionStorage.setItem("entities", JSON.stringify(data));
                    },
                    complete: function() {
                        // Schedule the next request when the current one's complete
                        setTimeout(worker, 8000);
                    }
                });
            })();

            (function worker() {
                $.ajax({
                    url: "/news",
                    type: "GET",
                    dataType: "json",
                    success: function(data) {
                        var newsbox = document.getElementById('ul-newsbox');
                        if (data['news'].length > 0) {
                            while (newsbox.firstChild) newsbox.removeChild(newsbox.firstChild);
                            var ulstr = "";
                            for (i = 0; i < data['news'].length; i++) {
                                ulstr += "<li>" + data['news'][i].text + "</li>";
                            }
                            newsbox.innerHTML = ulstr;
                        } else {
                            while (newsbox.firstChild) newsbox.removeChild(newsbox.firstChild);
                        }

                        sessionStorage.setItem("news", JSON.stringify(data));
                    },
                    complete: function() {
                        // Schedule the next request when the current one's complete
                        setTimeout(worker, 4500);
                    }
                });
            })();
        }
    });
});

$(document).bind('mouseup', function () {
    // Add a click-handler to the image.
    $('#stuff').bind('mouseup', function (ev) {
        switch (event.which)
        {
            case 1:
                var $img = $(ev.target);

                var offset = $img.offset();
                var x = ev.clientX - offset.left;
                var y = ev.clientY - offset.top;

                x = Math.floor(x / 100);
                y = Math.floor(y / 100);

                // Get the data out of storage
                var data = JSON.parse(sessionStorage.getItem("data"));

                // If there's some data, fill in the inspector with whatever is in the
                // current square. Cities take precedence, with mapzone properties as a
                // fallback only
                if (typeof data != 'undefined') {
                    var name = document.getElementById("txt-inspector-name");
                    var citySelected = false;

                    if (data['cities'].length > 0) {
                        for (var i = 0; i < data['cities'].length; i++) {
                            if ((data['cities'][i].x == x) && (data['cities'][i].y == y)) {
                                name.innerText = data['cities'][i].named;
                                citySelected = true;
                            }
                        }
                    }

                    if (!citySelected) {
                        for (i = 0; i < data['mapzones'].length; i++) {
                            if ((data['mapzones'][i].x == x) && (data['mapzones'][i].y == y)) {
                                name.innerText = data['mapzones'][i].geotype;
                            }
                        }
                    }
                }
                break;
            case 2:
                break;
            case 3:
                var $infopanes = $('#info-panes');
                $infopanes.stop();
                $infopanes.fadeToggle();
                break;
            default:
                break;
        }
    });
});

</script>

{% endblock %}